# Automatically release a new version when a PR is merged to branch `release`

name: 'release'
on:
  pull_request:
    types: [ closed ]
    branches: [ release ]

env:
  BRANCH_TO_RELEASE: 'release'
  TAG_PREFIX: 'v'
  FILE_CHANGELOG: 'RELEASE-NOTES.md'
  DOTNET_VERSION: '8.x'
  NUGET_PROJECT_FILE: 'Ddth.Templates.WebApi.csproj'

jobs:
  CallCI:
    uses: ./.github/workflows/ci.yaml

  ReleaseDryRun:
    runs-on: ubuntu-latest
    needs: [ CallCI ]
    if: |
      github.event.pull_request.merged == true
    outputs:
      RESULT: ${{ steps.release_dry_run.outputs.result }}
      VERSION: ${{ steps.release_dry_run.outputs.releaseVersion }}
      RELEASE_NOTES: ${{ steps.release_dry_run.outputs.releaseNotes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Release (dry-run)
        id: release_dry_run
        uses: btnguyen2k/action-semrelease@v4
        with:
          dry-run: true
          auto-mode: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-major-release: false
          tag-minor-release: false
          branches: ${{ env.BRANCH_TO_RELEASE }}
          tag-prefix: ${{ env.TAG_PREFIX }}
          tag-only: true

  Release:
    runs-on: ubuntu-latest
    if: |
      (github.event.pull_request.merged == true) && (needs.ReleaseDryRun.outputs.RESULT == 'SUCCESS')
    needs: [ ReleaseDryRun ]
    permissions:
      contents: write # to be able to publish a GitHub release
    outputs:
      RESULT: ${{ needs.ReleaseDryRun.outputs.RESULT }}
      VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
      RELEASE_NOTES: ${{ needs.ReleaseDryRun.outputs.RELEASE_NOTES }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Choose .NET version
        run: |
          VERSION=$(echo ${{ matrix.dotnet }} | sed -E "s/^([0-9]+).*/\1/")
          echo {\"sdk\": {\"version\": \"${VERSION}\"}} > global.json
          cat global.json
      - name: Display dotnet version
        run: dotnet --version
      - name: Update NuGet metadata
        uses: actions/github-script@v7
        env:
          RESULT: ${{ needs.ReleaseDryRun.outputs.RESULT }}
          VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
          RELEASE_NOTES: ${{ needs.ReleaseDryRun.outputs.RELEASE_NOTES }}
        with:
          script: |
            console.log('üïò Updating metadata...')
            console.log(`   üêõ [DEBUG] RESULT: ${process.env['RESULT']}`);
            console.log(`   üêõ [DEBUG] RELEASE VERSION: ${process.env['VERSION']}`);
            console.log(`   üêõ [DEBUG] RELEASE NOTES: ${process.env['RELEASE_NOTES']}`);

            var releaseNotes = process.env['RELEASE_NOTES'];
            releaseNotes = releaseNotes.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            var fs = require('fs');
            var content = fs.readFileSync('${{ env.NUGET_PROJECT_FILE }}', 'utf8');
            content = content.replace(/<<VERSION>>/g, process.env['VERSION']);
            content = content.replace(/<<RELEASE-NOTES>>/g, releaseNotes);
            content = content.replace(/<<RELEASE_NOTES>>/g, releaseNotes);
            fs.writeFileSync('${{ env.NUGET_PROJECT_FILE }}.final', content);
      - name: Update other metadata
        run: |
          RESULT='${{ needs.ReleaseDryRun.outputs.RESULT }}'
          VERSION='${{ needs.ReleaseDryRun.outputs.VERSION }}'
          RELEASE_NOTES='${{ needs.ReleaseDryRun.outputs.RELEASE_NOTES }}'

          echo "üïò Updating metadata..."

          DATE=`date +%Y-%m-%d`
          head -1 ${FILE_CHANGELOG} > .temp.md
          echo -e "\n## ${DATE} - v${VERSION}\n\n${RELEASE_NOTES}" >> .temp.md
          tail -n +2 ${FILE_CHANGELOG} >> .temp.md
          mv -f .temp.md ${FILE_CHANGELOG}
          echo ========== content of ${FILE_CHANGELOG} ==========
          cat ${FILE_CHANGELOG}

          echo ========== update .md files ==========
          sed -i -E "s/<<VERSION>>/v${VERSION}/" ./*.md

          echo ========== Build and Publish NuGet package ==========
          cp -f ${{ env.NUGET_PROJECT_FILE }} ${{ env.NUGET_PROJECT_FILE }}.bak
          mv -f ${{ env.NUGET_PROJECT_FILE }}.final ${{ env.NUGET_PROJECT_FILE }}
          cat ${{ env.NUGET_PROJECT_FILE }}
          dotnet pack
          dotnet nuget push *.nupkg --source "nuget.org" --api-key ${{ secrets.NUGET_API_KEY }}
          mv -f ${{ env.NUGET_PROJECT_FILE }}.bak ${{ env.NUGET_PROJECT_FILE }}

          echo ========== commit updates ==========
          git config --global user.email "<>"
          git config --global user.name "CI Build"
          git commit -am "Update metadata for new version ${VERSION}"
          git push origin ${BRANCH_TO_RELEASE}

          # echo ========== tag ==========
          # git tag -f -a "${TAG_PREFIX}${VERSION}" -m "Release ${TAG_PREFIX}/v${VERSION}"
          # git push origin "${TAG_PREFIX}${VERSION}" -f
          # echo "‚úÖ Done."
      # - name: Create release
      #   uses: actions/github-script@v7
      #   env:
      #     VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
      #     RELEASE_NOTES: ${{ needs.ReleaseDryRun.outputs.RELEASE_NOTES }}
      #   with:
      #     script: |
      #       const {data: release} = await github.rest.repos.createRelease({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         tag_name: process.env['TAG_PREFIX'] + process.env['VERSION'],
      #         name: process.env['TAG_PREFIX'] + process.env['VERSION'],
      #         body: process.env['RELEASE_NOTES'],
      #         draft: false,
      #         prerelease: false,
      #       });
      #       console.log('‚úÖ Created release: ', release);
      - name: SemRelease
        uses: btnguyen2k/action-semrelease@v4
        with:
          auto-mode: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-major-release: false
          tag-minor-release: false
          branches: ${{ env.BRANCH_TO_RELEASE }}
          tag-prefix: ${{ env.TAG_PREFIX }}
      - name: Cleanup file .semrelease/this_release
        run: |
          VERSION='${{ needs.ReleaseDryRun.outputs.VERSION }}'
          echo "üïò Cleaning up file .semrelease/this_release..."
          echo "# This file has been cleaned up post-releasing version ${VERSION}." > .semrelease/this_release
          echo "# Generate its content quickly using the following command:" >> .semrelease/this_release
          echo "#   git log origin..HEAD | grep \"^\s\" > .semrelease/this_release" >> .semrelease/this_release
          git config --global user.email "<>"
          git config --global user.name "CI Build"
          git commit -am "Cleanup file .semrelease/this_release post-releasing version ${VERSION}"
          git push -f
          echo "‚úÖ Done."

  MergeToMain:
    runs-on: ubuntu-latest
    needs: [ Release ]
    permissions:
      pull-requests: write # to be able to create PRs or comment on released PRs
    steps:
      - uses: actions/github-script@v7
        env:
          VERSION: ${{ needs.Release.outputs.VERSION }}
          RELEASE_NOTES: ${{ needs.Release.outputs.RELEASE_NOTES }}
        with:
          script: |
            const {data: pr} = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Merge to main after releasing new version ${process['env']['VERSION']}`,
              body: process['env']['RELEASE_NOTES'],
              head: process['env']['BRANCH_TO_RELEASE'],
              base: 'main',
              maintainer_can_modify: true,
            });
            console.log('‚úÖ Created PR: ', pr);
